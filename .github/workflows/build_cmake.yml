name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  REFERENCE_OS: 'ubuntu-latest'

jobs:
  build:
    name: "${{ matrix.configurations.name }} | ${{ matrix.cmake-build-type }}"
    environment: configure coverage
    runs-on: ${{ matrix.configurations.os }}
    strategy:
      fail-fast: false
      matrix:
        configurations:
          - name: Ubuntu Latest
            os: ubuntu-latest
          # - name: MacOS Latest # deactivated because mp-units is not compatible with clangApple
          #   os: macos-latest
          # - name: Windows Latest # deactivated because msvc fails because of clang pragmas
          #   os: windows-latest
        # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        cmake-build-type: [ Release, Debug, RelWithDebInfo ]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 100

    - name: Cache
      uses: actions/cache@v2
      env:
        cache-name: cache-conan-modules
      with:
        path: |
          ${{ env.CONAN_USER_HOME }}
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.cmake-build-type }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

    - name: Install gcc-11
      if: matrix.configurations.os == env.REFERENCE_OS # only for linux
      run: |
        sudo apt-get install -y gcc-11 g++-11
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11

    - name: Create Build Environment # setup directory for out-of-tree building
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install conan
      shell: bash
      run: |
        python3 -m pip install --upgrade pip setuptools
        python3 -m pip install conan
        echo "/home/runner/.local/bin" >> $GITHUB_PATH

    - name: Install gcovr
      shell: bash
      run: python3 -m pip install gcovr --user --no-warn-script-location

    - name: Check build prerequisites # Fail if we can't run conan or gcovr
      if: matrix.configurations.os == env.REFERENCE_OS
      shell: bash
      run: conan --version && gcovr --version

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake -S $GITHUB_WORKSPACE -B . -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{ matrix.cmake-build-type }}

    - name: Run tests
      if: matrix.configurations.os != env.REFERENCE_OS || matrix.cmake-build-type != 'Debug'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration. The coverage target runs the autodiscovered catch2 tests using
      # ctest and records the coverage using gcov
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.cmake-build-type }}

    - name: Run tests with coverage
      if: matrix.configurations.os == env.REFERENCE_OS && matrix.cmake-build-type == 'Debug'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration. The coverage target runs the autodiscovered catch2 tests using
      # ctest and records the coverage using gcov
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: cmake --build . --config ${{ matrix.cmake-build-type }} --target coverage

    - uses: codecov/codecov-action@v2
      if: matrix.configurations.os == env.REFERENCE_OS && matrix.cmake-build-type == 'Debug'
      with:
        files: ${{runner.workspace}}/build/coverage.xml

    - name: coverage report - send to Codacy
      if: matrix.configurations.os == env.REFERENCE_OS && matrix.cmake-build-type == 'Debug'
      working-directory: ${{ runner.workspace }}/build
      shell: bash
      run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml --skip --project-token ${{ secrets.CODACY_PROJECT_TOKEN }}
