name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  REFERENCE_CONFIG: 'Ubuntu Latest gcc12' # configuration used for coverage etc

jobs:
  build:
    name: "${{ matrix.configurations.name }} | ${{ matrix.cmake-build-type }}"
    environment: configure coverage
    runs-on: ${{ matrix.configurations.os }}
    strategy:
      fail-fast: false
      matrix:
        configurations:
          - name: Ubuntu Latest gcc12
            os: ubuntu-22.04
            compiler: gcc
          - name: ubuntu-22.04 clang15
            os: ubuntu-22.04
            compiler: clang15
          - name: ubuntu Latest clang16
            os: ubuntu-22.04
            compiler: clang16
          - name: ubuntu-22.04 emscripten
            os: ubuntu-22.04
            compiler: emscripten
        # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        cmake-build-type: [ Release, Debug ]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 100

    - name: Cache
      uses: actions/cache@v3
      env:
        cache-name: cache-fetchContent-cache
      with:
        path: ${{runner.workspace}}/build/_deps
        key: ${{ runner.os }}-${{ matrix.configurations.compiler }}-${{ matrix.cmake-build-type }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Dependencies.cmake') }}

    - name: Install gcc-12
      if: matrix.configurations.compiler == 'gcc'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa # provides newer gcc 12.2.0 instead of 12.1.0
        sudo apt-get install -y gcc-12 g++-12
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 110 --slave /usr/bin/g++ g++ /usr/bin/g++-12 --slave /usr/bin/gcov gcov /usr/bin/gcov-12

    - name: Install clang-15
      if: matrix.configurations.compiler == 'clang15'
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main'
        sudo apt update
        sudo apt install -y clang-15 libc++-15-dev libc++abi-15-dev
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-15 110

    - name: Install clang-16
      if: matrix.configurations.compiler == 'clang16'
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main'
        sudo apt update
        sudo apt install -y clang-16 libc++-16-dev libc++abi-16-dev
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-16 110

    - name: Install emscripten
      if: matrix.configurations.compiler == 'emscripten'
      run: |
        cd
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        # Download and install the latest SDK tools.
        ./emsdk install 3.1.30 # latest = 3.1.32
        # Make the "latest" SDK "active" for the current user. (writes .emscripten file)
        ./emsdk activate 3.1.30
        # Activate PATH and other environment variables in the current terminal
        source ./emsdk_env.sh

    - name: Install gcovr
      shell: bash
      if: matrix.configurations.name == env.REFERENCE_CONFIG && matrix.cmake-build-type == 'Debug'
      run: |
        python3 -m pip install gcovr --user --no-warn-script-location
        gcovr --version

    - name: Configure CMake
      if: matrix.configurations.compiler != 'emscripten'
      # Use a bash shell, so we can use the same syntax for environment variable access regardless of the host operating system
      shell: bash
      run: cmake -S . -B ../build -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DENABLE_COVERAGE=${{ matrix.configurations.name == env.REFERENCE_CONFIG &&  matrix.cmake-build-type == 'Debug'}}

    - name: Configure CMake Emscripten
      if: matrix.configurations.compiler == 'emscripten'
      # Use a bash shell, so we can use the same syntax for environment variable access regardless of the host operating system
      shell: bash
      run: |
        source ~/emsdk/emsdk_env.sh
        emcmake cmake -S . -B ../build -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DENABLE_COVERAGE=${{ matrix.configurations.name == env.REFERENCE_CONFIG &&  matrix.cmake-build-type == 'Debug'}}

    - name: Build
      if: matrix.configurations.compiler != 'emscripten'
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build ../build --config ${{ matrix.cmake-build-type }}

    - name: Build Emscripten
      if: matrix.configurations.compiler == 'emscripten'
      shell: bash
      run: |
        source ~/emsdk/emsdk_env.sh
        cd ../build
        emmake make

    - name: Run tests
      if: matrix.configurations.name != env.REFERENCE_CONFIG || matrix.cmake-build-type != 'Debug'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration. The coverage target runs the autodiscovered catch2 tests using
      # ctest and records the coverage using gcov
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.cmake-build-type }}

    - name: Run tests with coverage
      if: matrix.configurations.name == env.REFERENCE_CONFIG && matrix.cmake-build-type == 'Debug'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration. The coverage target runs the autodiscovered catch2 tests using
      # ctest and records the coverage using gcov
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: cmake --build . --config ${{ matrix.cmake-build-type }} --target coverage

    - uses: codecov/codecov-action@v3
      if: matrix.configurations.name == env.REFERENCE_CONFIG && matrix.cmake-build-type == 'Debug'
      with:
        files: ${{runner.workspace}}/build/coverage.xml

    - name: coverage report - send to Codacy
      if: matrix.configurations.name == env.REFERENCE_CONFIG && matrix.cmake-build-type == 'Debug'
      working-directory: ${{ runner.workspace }}/build
      shell: bash
      run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml --skip --project-token ${{ secrets.CODACY_PROJECT_TOKEN }}
